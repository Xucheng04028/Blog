<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[唐小筑]]></title>
  <link href="https://blog.tangxiaozhu.com/atom.xml" rel="self"/>
  <link href="https://blog.tangxiaozhu.com/"/>
  <updated>2018-04-29T23:16:35+08:00</updated>
  <id>https://blog.tangxiaozhu.com/</id>
  <author>
    <name><![CDATA[]]></name>
    
  </author>
  <generator uri="http://www.mweb.im/">MWeb</generator>
  
  <entry>
    <title type="html"><![CDATA[每周分享第 1 期]]></title>
    <link href="https://blog.tangxiaozhu.com/15246446693895.html"/>
    <updated>2018-04-25T16:24:29+08:00</updated>
    <id>https://blog.tangxiaozhu.com/15246446693895.html</id>
    <content type="html"><![CDATA[
<ul>
<li>
<a href="#toc_0">疑问</a>
<ul>
<li>
<a href="#toc_1">Markdown 为何两次回车才能换行？</a>
</li>
<li>
<a href="#toc_2">Bash 是什么？</a>
</li>
</ul>
</li>
<li>
<a href="#toc_3">工具</a>
<ul>
<li>
<a href="#toc_4">SourceTree：Git 和 Hg 客户端</a>
</li>
</ul>
</li>
<li>
<a href="#toc_5">好文</a>
<ul>
<li>
<a href="#toc_6">Git 深入浅出 Git 权限校验（最熟悉的陌生概念）</a>
</li>
<li>
<a href="#toc_7">搬进 GitHub</a>
</li>
</ul>
</li>
</ul>


<h2 id="toc_0">疑问</h2>

<h3 id="toc_1">Markdown 为何两次回车才能换行？</h3>

<ol>
<li>在写 MD 文件时通常首行不会空格，在切换下一个自然段时，如果仅仅一个回车就换行，即产生 <code>&lt;br&gt;</code> 标签，那么相邻自然段之间就没有足够的空白，会使文章难以阅读；</li>
<li>如果一个回车就换行，产生 <code>&lt;p&gt;</code> 标签，那么在列表换行和代码内部换行时，将会产生额外的空白，会使文章难以阅读；请注意，<code>&lt;br&gt;</code> 标签只是开始新的一行，浏览器解析时相邻自然段中行间距通常较小，而当浏览器遇到 <code>&lt;p&gt;</code> 标签时，通常会在相邻的段落之间插入一些垂直的间距；</li>
<li>如果确实需要 <code>&lt;br&gt;</code> 标签的话，在需要处键入两个以上的空格后回车。</li>
<li>⚠️ 如果是单回车产生 <code>&lt;br&gt;</code>，双回车产生 <code>&lt;p&gt;</code> 呢？这显然更加符合我的想法～ 但目前一些编辑器可以设置回车转换为 <code>&lt;br&gt;</code> 标签，也即单回车产生一个 <code>&lt;br&gt;</code>，双回车产生俩 <code>&lt;br&gt;</code> 标签，这对浏览器友好么？</li>
</ol>

<pre><code>&lt;br&gt; 标签是空标签，意味着它没有结束标签，因此 &lt;br&gt;&lt;/br&gt; 的写法是错误的；
但在 XHTML 中，要求空标签也需结束标签，且把结束标签放在开始标签中，也就是 &lt;br /&gt;。
</code></pre>

<span id="more"></span><!-- more -->

<h3 id="toc_2">Bash 是什么？</h3>

<p>在 macOS 上打开终端，标题栏上总有 <code>bash</code> 字眼，那么这是啥？Bash，Unix shell 的一种，是一个命令处理器，通常运行于文本窗口中，并能执行用户直接输入的命令，在 1987 年由布莱恩·福克斯（Brian J. Fox）为了 GNU 计划而编写。</p>

<p>Unix shell 是啥？一种壳层与命令行界面，是 Unix 操作系统下传统的用户和计算机的交互界面，之所以被称作 shell 是因为它隐藏了操作系统低层的细节，Unix 操作系统下的 shell 既是用户交互的界面，也是控制系统的脚本语言。shell 是啥？壳层，指作业系统中，提供存取内核所提供之服务的程式，也泛指所有为用户提供操作界面的程序。通常将 shell 分为两类：命令列与图形界面。命令列壳层提供一个命令行界面（CLI），而图形壳层提供一个图形使用者界面（GUI）。与之相对的是程序内核（Kernel），内核不提供和用户的交互功能。</p>

<h2 id="toc_3">工具</h2>

<h3 id="toc_4">SourceTree：Git 和 Hg 客户端</h3>

<p>SourceTree 支持添加 GitHub 与 Bitbucket 多账号，支持 Mercurial 和 Git 两种分散式版本管理系统，由 Atlassian 公司开发。暂未深度使用，但初见观感甚好。</p>

<h2 id="toc_5">好文</h2>

<h3 id="toc_6"><a href="https://ruby-china.org/topics/30298">Git 深入浅出 Git 权限校验（最熟悉的陌生概念）</a></h3>

<p>讲清楚了 Git 权限问题，对于在一台电脑上设置多个 GitHub 账号大有裨益。</p>

<p>其在另篇文章 <a href="http://debugtalk.com/post/trap-in-GitHub-authority-verification/">GitHub 权限校验失败给我的启发</a> 中讲明了 macOS 上 Git 用户信息存储位置。</p>

<h3 id="toc_7"><a href="http://gitbeijing.com/">搬进 GitHub</a></h3>

<p>较为通俗的 GitHub 入门教程。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Zotero 如何添加文章检索引擎]]></title>
    <link href="https://blog.tangxiaozhu.com/15249764881993.html"/>
    <updated>2018-04-29T12:34:48+08:00</updated>
    <id>https://blog.tangxiaozhu.com/15249764881993.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>本文被少数派精选：<a href="https://sspai.com/post/40458">点此查看</a></p>
</blockquote>

<p>Zotero 是优秀的免费开源个人知识管理工具，一般用于管理学术文献，其以跨 macOS、Windows、Linux 三大平台、强大易用的功能闻名于学术圈。如果你是新生或者还未使用文献管理工具，如果你需要知识管理工具，Zotero 可能是你最好的选择之一。关于 Zotero 的使用教程数不胜数，但本文所讲的问题「如何添加文章（文献）检索引擎」任何其他教程都没有给出解决方案，我也是探索良久才得出解决办法。</p>

<blockquote>
<p>添加列表中没有的检索引擎，请在浏览器中访问检索引擎网页，并从 Zotero 的“定位”菜单中，选择“添加”。但崩溃的是按照此提示的操作，无法添加检索引擎。</p>
</blockquote>

<p><img src="media/15249764881993/15249765544916.png" alt="先放一张效果图"/></p>

<h2 id="toc_0">添加教程</h2>

<p>从 Zotero <code>首选项</code> -&gt; <code>高级</code> -&gt; <code>文件和文件夹</code> 打开数据库文件 ，再打开控制检索引擎的 <code>locate/engines.json</code> 文件。如下图所示，<code>CrossRef Lookup</code>、<code>Google Scholar Search</code>、<code>Pubget Lookup</code> 是默认的三个检索引擎。那么如何添加新的检索引擎，比如知网？</p>

<p><img src="media/15249764881993/15249765853476.png" alt="三个默认检索引擎"/></p>

<h3 id="toc_1">以添加知网检索引擎为例</h3>

<p>可以看到，上图中三对 <code>{}</code> 括号中的代码代表着三个默认的检索引擎。添加其他检索引擎只需添加类似代码。下文所示代码是知网引擎，在指定位置添加半角逗号以后，将代码复制到自己的 <code>engines.json</code> 文件中保存即可。重新打开 Zotero 即可发现知网检索引擎已被添加。</p>

<pre><code>        &quot;_iconSourceURI&quot;: &quot;http://pubget.com/favicon.ico&quot;
    },   此处要加英文（半角）逗号，然后从下面开始复制并添加文末位置
    {
        &quot;name&quot;: &quot;CNKI Search&quot;,
        &quot;alias&quot;: &quot;CNKI&quot;,
        &quot;icon&quot;: null,
        &quot;_urlTemplate&quot;: &quot;http://search.cnki.net/kns/brief/Default_Result.aspx?code=SCDB&amp;kw={z:title}&quot;,
        &quot;description&quot;: &quot;CNKI&quot;,
        &quot;hidden&quot;: true,
        &quot;_urlParams&quot;: [],
        &quot;_urlNamespaces&quot;: {
            &quot;rft&quot;: &quot;info:ofi/fmt:kev:mtx:journal&quot;,
            &quot;z&quot;: &quot;http://www.zotero.org/namespaces/openSearch#&quot;,
            &quot;&quot;: &quot;http://a9.com/-/spec/opensearch/1.1/&quot;
        },
        &quot;_iconSourceURI&quot;: &quot;http://static.wanfangdata.com.cn/wfks/img/logo_new.png&quot;
    }
</code></pre>

<p>对于 IP 用户，可直接添加知网、万方、维普等检索引擎，就可以无忧无虑地下载文献。但对于使用学校代理的用户，需要更改 <code>_urlTemplate</code>。添加其他检索引擎事实上也只需重点修改 <code>_urlTemplate</code> 中的搜索网址。</p>

<h3 id="toc_2">如何确定搜索网址</h3>

<p>那么如何确定 <code>_urlTemplate</code> 中的搜索网址？以万方为例：假设我们在万方搜索 <code>唐小筑</code>，网址是这样的形式 <code>http://s.wanfangdata.com.cn/Paper.aspx?q=唐小筑&amp;f=top</code>，注意到其中 <code>唐小筑</code> 即为我们的搜索目标， 而参数 <code>{z:title}</code> 代表着 Zotero 中条目名称，那么 <code>_urlTemplate</code> 中的搜索网址就应该是：</p>

<pre><code>http://s.wanfangdata.com.cn/Paper.aspx?q={z:title}&amp;f=top
</code></pre>

<h2 id="toc_3">总结</h2>

<p>Zotero 是开源应用，每一个功能对应的文件都可自行修改，但大部分人应该跟我一样，几乎不懂编程，但也不要对此恐惧。遇到问题也不妨试着找找这个问题对应功能的控制文件，无论是模仿修改还是向其他人求教都会有所帮助。</p>

<p>若对 Zotero 的使用有疑问欢迎讨论……</p>

<p><br></p>

<blockquote>
<p>本文应用版本：<br/>
Zotero 5.0.34.6 for macOS </p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[再谈 Homebrew Cask 在 macOS 上的应用安装]]></title>
    <link href="https://blog.tangxiaozhu.com/15249731448826.html"/>
    <updated>2018-04-29T11:39:04+08:00</updated>
    <id>https://blog.tangxiaozhu.com/15249731448826.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>本文被少数派精选：<a href="https://sspai.com/post/40321">点此查看</a></p>
</blockquote>

<p>以新手的视角说说 Homebrew Cask，通过此文，希望同为新手的我们可以更加理解 Homebrew Cask，也更频繁地使用它安装不上架 Mac App Store 的应用，让生活少一些繁琐。</p>

<p>Homebrew 是一款开源的软件包管理系统，用以简化 macOS 上的软件安装过程，可以类比于 Windows 上软件管家的一键安装。Homebrew 在 2009 年由马克斯·霍威尔（Max Howell）写成，它在 GitHub 上拥有大量贡献者，目前仍处于活跃状态。</p>

<p>Homebrew Cask 是 Homebrew 的扩展，借助它可以方便地在 macOS 上安装图形界面程序，即我们常用的各类应用。Homebrew 中文含义为自制、自酿酒，Cask 中文含义为桶、木桶，桶装酒是一种成品，也就是说每一个 <code>homebrew cask</code> 都可以直接使用的，比如 Atom 的 Cask 名称为 atom，那么就可以使用如下命令安装：</p>

<pre><code>brew cask install atom
</code></pre>

<p><img src="media/15249731448826/15249752711518.gif" alt="from homebrew-cask"/></p>

<p>甚至也可以提交新的 Cask，比如假设有桌面客户端少数派，则用 <code>brew cask create sspai</code> 创建新的名称为 <code>sspai</code> 的 Cask，当然还要提供官网下载链接、官方主页、应用版本等信息，可以参照 <a href="https://github.com/caskroom/homebrew-cask/blob/master/CONTRIBUTING.md">官方教程</a>，此处就不再细说。</p>

<h2 id="toc_0">安装 Homebrew Cask</h2>

<p>如未安装过 Homebrew 可参照 <a href="https://brew.sh/index_zh-cn.html">官网方式</a> 安装：</p>

<pre><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
</code></pre>

<p>将以上命令粘贴至终端中执行。然后执行 <a href="https://caskroom.github.io/">命令</a> <code>brew tap caskroom/cask</code> 获取 Homebrew Cask。</p>

<p>如果有错误提示，可在终端中执行 <code>xcode-select --install</code>，在弹出的窗口选择 Install 以安装 Command Line Tools，路径为 <code>/Library/Developer/CommandLineTools</code>，如要卸载，删除此文件夹即可。当然也可以到 Mac App Store 安装体积庞大的 Xcode。</p>

<h2 id="toc_1">如何使用 Homebrew Cask</h2>

<pre><code>brew cask install 应用名称
brew cask install &lt;甲应用名称&gt; &lt;乙应用名称&gt; &lt;丙应用名称&gt;
</code></pre>

<p>前文已经讲过这个安装命令，但一个问题是：如何确认它支持所要安装的应用？</p>

<pre><code>brew cask search 关键字
</code></pre>

<p>比如要确定是否支持应用 gooooooogle，可搜索关键字 goo，即可显示所有包含 goo 的应用。如果不加关键字，会显示出所有支持的应用名称。</p>

<p><img src="media/15249731448826/15249753281052.jpg" alt="" class="mw_img_center" style="width:500px;display: block; clear:both; margin: 0 auto;"/></p>

<p>由于 Homebrew Cask 还不支持更新应用，故建议使用应用自带的方式进行更新。欲要查看其他命令，可在终端执行 <code>brew cask help</code> 以显示所有 commands，比如发现查看应用 Cask 信息的命令是 <code>info</code>，则在终端执行 <code>brew cask info 应用名称</code> 即可显示该应用信息。 </p>

<p><img src="media/15249731448826/15249753582673.jpg" alt="" class="mw_img_center" style="width:500px;display: block; clear:both; margin: 0 auto;"/></p>

<h2 id="toc_2">Homebrew Cask 原理</h2>

<p>之前，是用软链接的方式将应用链接到 Application 文件夹，有人说这样的方式会导致 Spotlight 无法检索到。但现在，它是将应用直接移动到 Application 文件夹，这与我们自己去官网下载应用再安装是完全一致的，后续更新或卸载也按平常的方式即可。</p>

<p>当然，也可以用 <code>brew cask uninstall 应用名称</code> 的方式，这种方式才会删除路径 <code>/usr/local/Caskroom</code> 中保留的应用信息文件，这样当我们用命令 <code>brew cask list</code> 查询已安装列表时，已卸载的应用才不会仍显示。也就是说，如果按照平常的方式，比如直接移到废纸篓，那么还需手动删除 Caskroom 中的应用信息文件。当然，不删除也没啥影响，因为一般没必要查看已安装列表，已安装应用在 Launchpad 中查看就好。</p>

<h2 id="toc_3">总结</h2>

<p>我们可以查阅 <a href="https://github.com/caskroom/homebrew-cask/blob/master/USAGE.md">官方使用说明</a> 以了解 Homebrew Cask 命令别名、高级搜索语法等用法。通过这种方式安装应用，与我们平时的方式安装应用，两者除了方式没有任何其他区别，那为何不尝试尝试这种轻松的方式呢？只一句命令，没有那些点击，没有那些拖动…… Homebrew Cask 让非 Mac App Store 应用的安装更轻松，若你也想以更轻松的方式安装和更新 Mac App Store 应用，请参阅 <a href="https://sspai.com/post/40382">终端上的 Mac App Store「mas」让应用的安装与更新无比轻松</a>。</p>

<p><br></p>

<blockquote>
<p>本文应用版本：<br/>
Homebrew v1.3.1<br/>
Homebrew-Cask v1.3.1</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[终端上的 Mac App Store「mas」让应用的安装与更新无比轻松]]></title>
    <link href="https://blog.tangxiaozhu.com/15243553635986.html"/>
    <updated>2018-04-22T08:02:43+08:00</updated>
    <id>https://blog.tangxiaozhu.com/15243553635986.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>本文被少数派精选并推荐至首页：<a href="https://sspai.com/post/40382">点此查看</a></p>
</blockquote>

<p>以下这 3 点是不是你在用 Mac App Store 时想要的？</p>

<ol>
<li>不想再忍受 Mac App Store 缓慢的打开速度； </li>
<li>批量安装或更新 Mac App Store 应用；</li>
<li>快速切换 Mac App Store 账号。</li>
</ol>

<p>如果是的话，你必须得试试终端上的 Mac App Store —— <a href="https://github.com/mas-cli/mas">mas</a>。</p>

<span id="more"></span><!-- more -->

<h2 id="toc_0">安装</h2>

<p><a href="https://brew.sh/index_zh-cn.html">Homebrew</a> 是安装 mas 的最好方式，在只要把以下代码复制到终端（Terminal）后运行即可：</p>

<pre><code>brew install mas
</code></pre>

<p>如未安装过 Homebrew 可参照 <a href="https://brew.sh/index_zh-cn.html">官网命令</a> 安装：</p>

<pre><code>/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;
</code></pre>

<h2 id="toc_1">查询与安装应用</h2>

<p>mas 作为终端上的 Mac App Store，其劣势是无法随意浏览众多应用、没有编辑推荐、没有排行榜… 但也因为不用加载这么多东西，甚至不用加载图片，它才有着惊人的速度。</p>

<p>Mac App Store 中每一个应用都有自己的应用识别码（Product Identifier），这可以在每个应用的链接中看到。mas 就是根据 Product Identifier 安装与更新应用，也提供了查询应用 ID 的命令。</p>

<pre><code>由 1Password 的链接可知其识别码为 443987910
https://itunes.apple.com/cn/app/1password/id443987910?mt=12
</code></pre>

<p>除了查看链接，有以下 x 种方法获取应用的识别码：</p>

<ol>
<li>用命令 <code>mas search 关键词</code> 查询应用。比如在终端中执行 <code>mas search xcode</code>，大概 1 秒就显示了结果；</li>
<li>用命令 <code>mas list</code> 查询已安装应用及其识别码。</li>
</ol>

<p><img src="media/15243553635986/15243558670489.png" alt="mas search Xcode &amp; mas list"/></p>

<p>安装应用只需知道此应用的识别码就可以安装具体软件。比如安装 Bear，流程如下：</p>

<ol>
<li>由命令 <code>mas search bear</code> 得知应用 Bear 的识别码为 1091189122；</li>
<li>第二步：使用命令 <code>mas install 1091189122</code> 安装。</li>
</ol>

<p>注意：</p>

<ol>
<li>应用必须在商店登陆账号的已购列表中，因为命令行无法完成「购买」这个操作；</li>
<li>对于新上架的应用，可能无法查询到其识别码。因为 mas 的查询列表在缓存文件中，目前尚不清楚其列表更新周期，但若由其他途径（如应用链接）得知新上架应用识别码，仍可正常安装。</li>
</ol>

<p><img src="media/15243553635986/15243580714614.jpg" alt=""/></p>

<p>我们不仅可以使用命令行安装单个应用，还可以批量安装应用，只需在应用识别码之间加上空格：</p>

<pre><code>mas install 甲应用识别码 乙应用识别码 丙应用识别码
</code></pre>

<h2 id="toc_2">更新应用</h2>

<p>如果要更新所有 Mac App Store 应用，只需终端执行一句命令：</p>

<pre><code>mas upgrade
</code></pre>

<p>如果更新特定应用，需要使用命令 <code>mas outdated</code> 先查询待更新列表以获取应用识别码，再更新一个或几个应用：</p>

<pre><code>mas upgrade 甲应用识别码
mas upgrade 甲应用识别码 乙应用识别码 丙应用识别码
</code></pre>

<p><img src="media/15243553635986/15243581331434.jpg" alt=""/></p>

<p>但要注意，mas 无法用于系统更新，即只能更新显示在 Mac App Store 中的应用。但可以使用命令 <code>softwareupdate -l</code> 获取系统更新列表，然后使用 <code>sudo softwareupdate -iva</code> 进行更新。</p>

<h2 id="toc_3">切换 Mac App Store 账号</h2>

<p>这是多区账号拥有者的福音，我们终于可以更方便地下载和更新其他区的应用了。如果忘记了当前帐号，使用命令 <code>mas account</code> 查询。可用命令 <code>mas signout</code> 退出当前帐号，并按如下命令登陆新的账号：</p>

<pre><code>mas signin Apple ID &quot;密码&quot;
如：mas signin mas@example.com &quot;mypassword&quot;
</code></pre>

<p>也可以设置命令别名以得到更爽快的体验，在隐藏文件 <code>.bashrc</code> 中添加以下内容：其路径为 <code>~/.bashrc</code>，同时按 <code>shift + command + .</code> 可显示隐藏文件。</p>

<pre><code>alias masus=&#39;mas signout &amp;&amp; mas signin myusappleid &quot;mypassword&quot;&#39;
alias mascn=&#39;mas signout &amp;&amp; mas signin mycnappleid &quot;mypassword&quot;&#39;  
alias mas?=&#39;mas account&#39; 
</code></pre>

<p>需重新打开终端以载入设置，那么在终端中执行 <code>masus</code> 即可切换到美区帐号，<code>mascn</code> 即切到中区，<code>mas?</code> 可查询目前登陆帐号。但如果开启了双重认证，可能遇到错误信息：</p>

<pre><code>Error: Sign in failed: The operation couldn’t be completed. (mas.MASError error 1.)
</code></pre>

<p>关闭双重认证则一切正常，但并不建议这样做，可以考虑关闭非重要帐号的双重认证，但 iOS 10.3 或 macOS Sierra 10.12.4 及更高版本中创建的某些帐户，<a href="https://support.apple.com/zh-cn/HT204915">无法关闭双重认证</a>。mas 团队正在着手处理开启双重认证无法登陆的问题，可去 <a href="https://github.com/mas-cli/mas/issues/56">督促一番</a>。</p>

<p>在问题解决之前该怎么办：在 Mac App Store 中登陆帐号，然后重新打开终端（Terminal）即可。</p>

<h2 id="toc_4">总结与美好的设想</h2>

<p>我们可以在 GitHub 上的 <a href="https://github.com/mas-cli/mas">mas 项目</a> 查看官方使用说明，或以 <code>mas help</code> 查看所有命令及其说明。之前介绍过 <a href="https://sspai.com/post/40321">Homebrew Cask 如何安装应用</a>，它的作用对象是非 Mac App Store 应用，而 mas 的对象是 Mac App Store 应用，两者互补无憾矣。</p>

<p>也许我们可以考虑如何合并两者，我觉着至少 <code>查询与安装应用</code> 阶段是可以融合的，<code>brew cask search 关键字</code> 与 <code>mas search 关键字</code> 这两个命令合为 <code>cmas search 关键字</code>，输出的结果可以是如下样子，而安装命令 <code>cmas install 应用识别码或应用名称</code> 关键字如果是应用识别码则从 mas 下载安装，如果是应用名称则从官网下载安装。</p>

<pre><code>cmas search pai  
sspai 6666666 (mas &amp; NMAS)  
ddpat 9999999 (mas Only)  
onlypai (NMAS Only)  
</code></pre>

<!-- 谢谢让 [JailbreakHum](https://sspai.com/user/681230/updates) 忙碌的人，谢谢 JailbreakHum 因忙碌而告诉我这个超级棒的技巧，谢谢 JailbreakHum 的指导…… -->

<p><br></p>

<blockquote>
<p>本文应用版本：<br/><br/>
1. mas v1.3.1：mas 是一个活跃项目，可以 <a href="https://github.com/mas-cli/mas/releases">点此查看</a> 其最新版本更新信息；<br/><br/>
2. Homebrew v1.3.0：可以 <a href="https://github.com/Homebrew/brew/releases">在此</a> 查看其最新版本更新信息。</p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[PDF 应用评测：Adobe Acrobat VS PDF Expert VS PDFelement]]></title>
    <link href="https://blog.tangxiaozhu.com/15249605684127.html"/>
    <updated>2018-04-29T08:09:28+08:00</updated>
    <id>https://blog.tangxiaozhu.com/15249605684127.html</id>
    <content type="html"><![CDATA[
<blockquote>
<p>本文被少数派精选：<a href="https://sspai.com/post/40293">点此查看</a></p>
</blockquote>

<p>我一直有考虑如何选择一个无可挑剔的 PDF 应用，这也许是一个强迫症的自我修养，因为总想以一个优美、简洁、全能的应用完成作业。如果你觉得 CAJ Viewer 等即能满足需求，而且没有感到任何不妥，那么本文可能并不适合您。</p>

<p>经过一番思考，我选择了 Adobe Acrobat、PDF Expert、PDFelement 三者进行横向分析。Adobe Acrobat 是鼻祖，谈到 PDF 就不能绕过它；PDF Expert 是 macOS 上最受欢迎的 PDF 应用，其为 Mac App Store 编辑精选、2015 年最佳应用、收费应用冠军；PDFelement 是我 <a href="https://sspai.com/post/38950">之前推荐</a> 的全能型应用，其开发者最近向我约了一份稿《Adobe Acrobat VS PDFelement》并愿意支付稿费，我愉快地接受了约稿，但拒绝了稿费，虽然 PDFelement 是我欣赏的应用，也解决了我遇到的一些问题，可我写文章一向是基于个人喜好的公正，暂时不需要稿费来改善生活。当然我很乐意再次推荐 PDFelement，因为新版 PDFelement 是参与活动所赠……</p>

<p>本文以两份中文 PDF 文件为例，平台为 macOS，其中 Adobe Acrobat、PDFelement 也提供 Windows 版本。福昕阅读器 macOS 版本的功能较为基础，在 Windows 下虽然很强大，比如有一些插件，但因其个人用户免费的策略也难免会有欠缺美感的广告，这也是福昕没有入选本文的原因，其他应用如预览、Skim 等要么功能太基础，要么美感不够，如果还有别的令人惊艳的 PDF 应用还望告知。本文选取的应用均是个人认为的代表之作，目的是彻底解决 PDF 的相关问题，也让自己少一个密切关注的问题。 </p>

<h2 id="toc_0">价格</h2>

<p>免费的优秀应用实在太少，绝大多数 PDF 免费应用更是让我难以忍受，较好的免费应用比如福昕也有致命缺点，比如 macOS 版无法编辑 PDF。原来我倾向于使用免费应用，现在倾向于使用相对便宜的收费应用，如 Parallel Desktop 这类难以替代的应用也只能忍痛掏钱。Adobe Acrobat、PDF Expert、PDFelement 在低需求下可以相互替代，但这三者的原本定价都不便宜，还好有中国特价、周年庆、教育优惠、代理商城优惠，也可关注赠码活动。比如 PDF Expert 官方十周年五折优惠与教育优惠叠加后约 101 元，这只是特殊时期的价格。</p>

<p><strong>Adobe Acrobat</strong> <br/>
<a href="https://acrobat.adobe.com/cn/zh-Hans/pricing/pricing.html">官网价格</a>：标准版约 ¥ 2018 &amp; 专业版约 ¥ 3030<br/>
<a href="http://shop.adobe.com/store/adbesttw/list/categoryID.63641600/ThemeID.30575500?id=HomeOffersPage&amp;SiteID=adbesttw">官网教育优惠</a>：专业版约 ¥  1077</p>

<p><strong>PDF Expert</strong> <br/>
Mac App Store 价格：¥ 396<br/>
<a href="https://pdfexpert.com/zh/store">中国官网特价</a>：¥ 139.99<br/>
<a href="https://item.taobao.com/item.htm?id=539462360053">数码荔枝商城</a>：¥ 129</p>

<p><strong>PDFelement</strong> <br/>
Mac App Store 价格：标准版 ¥ 198 &amp; 专业版 ¥ 648<br/>
<a href="https://pdf.wondershare.cn/store/buy-pdfelement-mac.html">中国官方特价</a>：标准版 ¥ 199 &amp; 专业版 ¥ 299<br/>
<a href="https://item.taobao.com/item.htm?id=549281178145">数码荔枝商城</a>：标准版 ¥ 129 &amp; 专业版 ¥ 199 <br/>
<a href="https://turnpage.com/wondershare-pdfelement">翻页软件商城</a>：标准版 ¥ 129 &amp; 专业版 ¥ 199</p>

<p>PDF Expert 也有教育优惠，但还没有中国官网便宜，在中网并没有教育优惠入口。PDFelement 也可以申请批量教育优惠许可证，我所使用的大多数应用，其开发者都提供教育优惠（独立开发者一般没有），通常优惠五折，甚至免费。而且，虽然我所购应用均为自费，但再给我一次机会的话，我会考虑找导师报销…… 相当不满意目前的报销制度，比如不能开发票的小东西，积少成多也是一笔巨款。如果我做导师，会想办法解决学生的一切学术所需之费用，包括正版软件、无法开具发票的物品与部分话费等。</p>

<h2 id="toc_1">界面</h2>

<p>在界面上，三者的左面板有些区别。对 Adobe Acrobat 与 PDFelement 来说，书签是 PDF 的目录大纲；在 PDF Expert 中书签是自定义的书签，点击页面右上角的标志即可添加书签，而大纲才是目录大纲，这对阅读书籍类 PDF 相当友好。</p>

<p><img src="media/15249605684127/15249735904213.jpg" alt=""/></p>

<h2 id="toc_2">功能</h2>

<p>Adobe Acrobat、PDF Expert、PDFelement 三者安装完毕后的大小分别约为 990 MB、37 MB、31 MB（可选 OCR 插件约为 550 MB），Acrobat 虽然庞大也确实有其强大之处。 Adobe Acrobat 可以说是超级型 PDF 应用，PDF Expert 是通用型 PDF 应用，PDFelement 是全能型 PDF 应用。</p>

<p>我认为的核心功能：① 阅读与批注；② 搜索；③ 可编辑；④ OCR；⑤ 云服务。在「独到之处」部分也会阐述令人耳目一新的功能，不过倒是可以先介绍 PDFelement 提供的 <a href="https://pdf.wondershare.com/templates/">PDF 模版库</a>，此处有大量免费与收费模版并划为数十分类，其中最受欢迎的简历模版还确实挺好看。</p>

<h3 id="toc_3">阅读与批注</h3>

<p>在此方面，Acrobat 的表现最差，PDF Expert 的表现最令我满意，PDFelement 的表现中规中矩：</p>

<p>① 只有 Acrobat 不支持多标签页；<br/>
② 只有 Acrobat 不能方便地使用不同颜色批注，即使将「注释」工具打开也较为不便；<br/>
③ 放大倍数较大时，PDFelement 滑动页面的流畅度下降。</p>

<p>批注功能没有多少可说的内容，三者的差别较小，阅读体验方面是我关注的重点。使用快捷键快速调整视图，这是阅读方面不可或缺的重要功能，而三者的视图快捷键也略有不同：</p>

<table>
<thead>
<tr>
<th style="text-align: center">缩放</th>
<th style="text-align: center">Acrobat</th>
<th style="text-align: center">PDF Expert</th>
<th style="text-align: center">PDFelement</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">放大</td>
<td style="text-align: center">⌘+</td>
<td style="text-align: center">⌘+</td>
<td style="text-align: center">⌘+</td>
</tr>
<tr>
<td style="text-align: center">缩小</td>
<td style="text-align: center">⌘-</td>
<td style="text-align: center">⌘-</td>
<td style="text-align: center">⌘-</td>
</tr>
<tr>
<td style="text-align: center">实际大小</td>
<td style="text-align: center">⌘1</td>
<td style="text-align: center">无</td>
<td style="text-align: center">⌘1</td>
</tr>
<tr>
<td style="text-align: center">适合宽度</td>
<td style="text-align: center">⌘2</td>
<td style="text-align: center">⌘9</td>
<td style="text-align: center">⌘2</td>
</tr>
<tr>
<td style="text-align: center">适合高度</td>
<td style="text-align: center">⌘3</td>
<td style="text-align: center">无</td>
<td style="text-align: center">⌘3</td>
</tr>
<tr>
<td style="text-align: center">适合页面</td>
<td style="text-align: center">⌘0</td>
<td style="text-align: center">⌘8</td>
<td style="text-align: center">⌘4</td>
</tr>
</tbody>
</table>

<p>当然也有些独特功能更好地服务了阅读的目的，这在细节上改善了阅读体验，也带给我惊喜，只不过 PDFelement 在此方面仅有基础功能。</p>

<p>Acrobat：<br/>
① 重排（⌘4），根据应用界面大小重新排列 PDF 内容，类似于多看阅读的重排效果；<br/>
② 比较文档：可显示 PDF 两个版本之间的差异，可自定义选项（如页数、内容类型）来显示比较结果。</p>

<p>PDF Expert：<br/>
① 拆分视图（水平 ⌘5；垂直 ⌘6）：在同一页面阅览两份 PDF 文档，以左右或上下（水平或垂直）的布局；<br/>
② 缩放到 100%（⌘0）：个人认为这是一个贴心的小功能；<br/>
③ 主题：有日间（⌥⌘W）、纸质（⌥⌘S）、夜间（⌥⌘N）三种模式。</p>

<h3 id="toc_4">搜索</h3>

<p>搜索功能也是服务于阅读的，但考虑到这是一项关键功能，故而单独说道说道。</p>

<p>Adobe Acrobat、PDF Expert、PDFelement 三者中仅 PDFelement 不支持「多文档」搜索，PDF Expert 支持搜索所有打开的 PDF 文件，而 Acrobat 甚至支持搜索指定目录下的所有 PDF 文件。但在搜索时，Acrobat 滑动页面的操作变慢；PDFelement 搜索完毕才能进行操作，这是一个亟待解决的问题；而 PDF Expert 可如常使用。</p>

<p><img src="media/15249605684127/15249746935309.png" alt="Adobe Acrobat" class="mw_img_center" style="width:300px;display: block; clear:both; margin: 0 auto;"/></p>

<h3 id="toc_5">编辑</h3>

<p>这部分没有太多可说的，三者的编辑体验类似，但 Adobe Acrobat 与 PDF Expert 都遇到了问题。Acrobat 提示当前字体不可用，转为系统字体；PDF Expert 编辑后字体发生变化。 </p>

<h3 id="toc_6">OCR</h3>

<p>Adobe Acrobat 支持 42 种语言，PDF Expert 不支持 OCR，PDFelement 支持 25 种语言。与其搜索功能一样，Acrobat 也可以识别多文档，PDFelement 也可。Acrobat 有一处令我满意的功能：如果文档是扫描件，试图编辑某页内容时，Acrobat 会提示是否将本页转为可编辑的文本。PDFelement 的做法是当打开扫描件时，它会提示是否进行 OCR 操作，我认为 Acrobat 的逻辑更人性化。 </p>

<p>在识别时，Acrobat 只能选择一种语言，PDFelement 在识别文件时可以选择多语言，但若一份 PDF 中文里夹杂着少量英文的话，同时选中文、英文与只选中文也没有区别。借助 PDFelement 转换功能将 OCR 前与后的译言页面转为图像，合并如图进行比较：Acrobat 的识别效果实在是惊人，不仅识别完全准确，与原文档相比也几乎没有任何区别；PDFelement 在识别少见字体的文字方面还是力不足。</p>

<p><img src="media/15249605684127/15249750585983.jpg" alt=""/></p>

<h3 id="toc_7">云服务</h3>

<p>我认为桌面端并不太需要云服务，电脑上的文件管理方式削减了对云服务的需求。但不可否认的是，在没有安装云盘客户端的情况下，应用直接支持云服务还是比较便利的。Acrobat 支持 Adobe Document Cloud、Adobe Creative Cloud、Box、Dropbox、OneDrive、SharePoint 站点；PDFelement 支持 Dropbox；PDF Expert 桌面版不支持任何云服务。不过移动端的云服务支持才是最重要的部分，这方面 PDF Expert 是表现最好的，它完美地集成了 iCloud 云服务，也可以将其他云盘中的文件夹设为「同步文件夹」以保持内容的一致。</p>

<h3 id="toc_8">应用打分</h3>

<table>
<thead>
<tr>
<th style="text-align: center">项目</th>
<th style="text-align: center">阅读与批注</th>
<th style="text-align: center">搜索</th>
<th style="text-align: center">编辑</th>
<th style="text-align: center">OCR</th>
<th style="text-align: center">云服务</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">Acrobat</td>
<td style="text-align: center">★★★☆☆</td>
<td style="text-align: center">★★★★★</td>
<td style="text-align: center">★★★☆☆</td>
<td style="text-align: center">★★★★★</td>
<td style="text-align: center">★★★☆☆</td>
</tr>
<tr>
<td style="text-align: center">PDF Expert</td>
<td style="text-align: center">★★★★★</td>
<td style="text-align: center">★★★★☆</td>
<td style="text-align: center">★★★☆☆</td>
<td style="text-align: center">☆☆☆☆☆</td>
<td style="text-align: center">★★★★★</td>
</tr>
<tr>
<td style="text-align: center">PDFelement</td>
<td style="text-align: center">★★★★☆</td>
<td style="text-align: center">★★★☆☆</td>
<td style="text-align: center">★★★★★</td>
<td style="text-align: center">★★★☆☆</td>
<td style="text-align: center">★★★☆☆</td>
</tr>
</tbody>
</table>

<h2 id="toc_9">独到之处</h2>

<p>Adobe Acrobat 在批处理方面表现优异，PDF Expert 在阅读体验方面表现优异，PDFelement 在格式转换与部分批处理方面的表现优异。</p>

<h3 id="toc_10">Adobe Acrobat</h3>

<p>Acrobat 的功能实在是太多，而且很细致，无愧于一款超级型 PDF 应用。如果遇到其他应用无法解决的问题，那么 Adobe Acrobat 应该可以解决，只是也许会需要高级技巧。如借助「动作向导」工具可以批量完成各类任务，甚至可以在<a href="https://acrobatusers.com/actions-exchange?trackingid=JZXYQ">更多动作</a>下载一些 Actions，如 Delete all Comments、Convert PDF to PowerPoint、Convert PDF File to PS File、Optimize PDF for SEO、Find, Highlight, and Extract Words 等。如果有更复杂的需求，可以借助「JavaScript」工具完成。</p>

<p><img src="media/15249605684127/15249750922498.jpg" alt=""/></p>

<h3 id="toc_11">PDF Expert</h3>

<p>PDF Expert 的功能实在是太少，但是它在阅读与批注方面的体验无人能及。可以这样说，它就是最好的 PDF 阅读器的样子。在设备协同方面做到了业界第一：Readdle Transfer 可以将 iOS 与 macOS 设备无缝连接；iOS 端云服务支持方面的工作也独树一帜，给了我完美的体验。</p>

<h3 id="toc_12">PDFelement</h3>

<p>格式转换，可将 PDF 或其选定页面转为 Word、Excel、PowerPoint、图像、ePub、纯文本、Pages、Html、RTF 文件，如转换为图像就可以方便地在文章中使用。Adobe Acrobat 虽然也可完成格式转换，但过程不易，而且部分格式的转换可能需要自造轮子。</p>

<p>批处理功能，如批量格式转换、批量去除水印、批量数据提取等，其中「批量数据提取」功能若使用 Adobe Acrobat 就比较麻烦，PDFelemnt 的优点就在于优化了这个过程。比如，当遇到大量报名表、发票等文件，如果非 PDF 格式则使用「批量格式转换」功能将其转为 PDF 文件，那么所有 PDF 文档的结构是相同的，数据提取时选定部分区域（所有文档的区域都是相同位置）即可将所有数据提取到 Excel 表单中。<a href="http://weibo.com/ttarticle/p/show?id=2309404097926317129991">在这里</a>可以查看使用方式与效果。</p>

<p><img src="media/15249605684127/15249751064950.jpg" alt=""/></p>

<h2 id="toc_13">总结</h2>

<p>Adobe Acrobat 在功能上无人能及，但阅读体验较差，价格太贵；PDF Expert 在阅读体验上独领风骚，也是最懂 Apple 风格的应用，只是缺一些专业的功能；PDFelement 则是各方面中规中矩，在批处理方面稍突出，但它没有鲜明的长短处，如果有一坐标轴，Acrobat 在最左，PDF Expert 在最右，那么 PDFelement 位于中间再稍偏右的位置。</p>

<p>如果只是想选择一个 PDF 阅读器的话，那么「编辑目录」的功能不可或缺，这点就将许多应用拒之门外。若要免费，似乎只能选择福昕阅读器。若要付费：</p>

<table>
<thead>
<tr>
<th style="text-align: center">项目</th>
<th style="text-align: center">阅读体验</th>
<th style="text-align: center">功能</th>
<th style="text-align: center">价格</th>
</tr>
</thead>

<tbody>
<tr>
<td style="text-align: center">Adobe Acrobat</td>
<td style="text-align: center">★★★☆☆</td>
<td style="text-align: center">★★★★★</td>
<td style="text-align: center">★★☆☆☆</td>
</tr>
<tr>
<td style="text-align: center">PDF Expert</td>
<td style="text-align: center">★★★★★</td>
<td style="text-align: center">★★★☆☆</td>
<td style="text-align: center">★★★★☆</td>
</tr>
<tr>
<td style="text-align: center">PDFelement</td>
<td style="text-align: center">★★★★☆</td>
<td style="text-align: center">★★★★☆</td>
<td style="text-align: center">★★★★☆</td>
</tr>
</tbody>
</table>

<p>① 若更追求完美的阅读体验：只能选择 PDF Expert；<br/>
② 若更在意一些专业功能，也要求较好的阅读体验：只能选择 PDFelement；<br/>
③ 若极其在意功能的完备性：只能选择 Adobe Acrobat。</p>

<p><strong>天下之大，何时才会出现一款全五星的 PDF 应用？</strong></p>

<p><br></p>

<blockquote>
<p>本文应用版本：<br/>
Adobe Acrobat Pro DC 2015.006.30306 for macOS <br/>
PDF Expert 2.2.1 for macOS <br/>
PDFelement 6 Pro 6.2.0.2988 for macOS </p>
</blockquote>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于独立博客的想法]]></title>
    <link href="https://blog.tangxiaozhu.com/15242849335257.html"/>
    <updated>2018-04-21T12:28:53+08:00</updated>
    <id>https://blog.tangxiaozhu.com/15242849335257.html</id>
    <content type="html"><![CDATA[
<p>在 GitHub Issues 写博客也面临数个问题：<br/>
1. 图片的插入，采用第三方 Issues 客户端时图片并不会上传至 GitHub 服务器，而是三方客户端的服务器，这显然增加了图片丢失风险；<br/>
2. 借助 Mirror 呈现内容在博客 <code>blog.tangxiaozhu.com</code> 地址，但搜索引擎只能检索到 Issues，这并不是我想要的；<br/>
3. 数据的备份也是个问题，虽然利用 IFTTT 进行备份，但格式错乱且只能备份每一篇 Issues 第一次发布时的内容。</p>

<p>因此，我决定重启 GitHub Pages，并将博客同步到多个平台，原来不愿意这样做是手工太累，但现在可以一键同步的工具越来越多，也越加好用。</p>

<p>此外，我决定不再随意修改已发布文章，这也是最后一次更新本文。今后对待每一篇博客都要严肃认真，要做到我之出品，必为精品，一旦发布除非有错别字、格式错误等问题，绝不修改。内容过时问题是我之前担忧所在，现在我也有了新的想法：写文章时标注好内容适用范围，即便未来过时了，也不失为一种历史参考资料，代表了过去的回忆。</p>

<span id="more"></span><!-- more -->

<hr/>

<p>更新于 20170927 19:14:48</p>

<p>也许对博客相关的事情折腾够了，或者是觉着我这种以分享为目的的独立博客也没必要再折腾了，所以我开始使用 GitHub Issues 写博客了，然后展示在 <code>blog.tangxiaozhu.com</code> 即我的博客网址。一番复杂之后，又开始崇尚简单，似乎有种看山初是山、不是山、又是山的感悟，比较满意现在写独立博客的方式，再找来一个备份功能就完美了。</p>

<hr/>

<p>因为简书经常将我的一篇博文设置为仅自己可查看，所以放弃使用。目前使用 Blogger 作为博客的镜像，同时也发布一些不便于在独立博客出现的内容。</p>

<p>同时也开始使用 MWeb 作为博客编辑器：<br/>
1. 支持 iOS &amp; macOS，这大大方便了我随时修改文章内容；<br/>
2. 支持直接发布和更新至 Blogger 等平台，iOS &amp; macOS 都能发布这点大大提升了 iPad 在我心中的地位。</p>

<p>几点想法：<br/>
- 虽然百度检索不到了，但是百度能检索到的内容会越来越少，我只是提前离开了。当然，不涉及敏感内容的独立博客还是可以被检索到的。<br/>
- 维基百科式的更新方式会使博文最后附加了许多内容，因为我经常更新博文，仔细考虑后，决定将有必要讲的更改历史直接放到博文中。像本文这篇只是关于想法的博文，适合以分割线的方式更新；涉及到技术的适合前面说的也即全文修改的方式。</p>

<p>如果疑虑某篇文章有没有更新，在独立博客上是有显示更新时间的，如果更新时间在很久以前，还请注意其是否已不适用。</p>

<hr/>

<p>2014 年，也就是大四的时候，我建立了<a href="http://blog.tangxiaozhu.com">独立博客</a>，在那之前我偶尔混迹于新浪博客。2016 年，我那荒废已久的独立博客又更新了，但之前的博文都删了。而且一个无法避免的问题是独立博客的访问量太低了，Google 还可以搜索到，而百度就很难检索到了，那就可能有人遇到了同样的问题却找不到我写的博文。故我决定将三方平台当作镜像博客，也就是 <del>简书</del>。如果独立博客内容有所更改，我会手动同步。</p>

<p>每次有新想法，会在 MarkEditor 中完成稿子，发布到独立博客，然后手动同步到。我认为一篇文章最好不断更新，防止之后的时间里误导了别人，实在无法更新也应该注明可能失效的提示。所以，我会将我的博文以维基百科的方式进行更新。写博客是兴趣，如果觉着还好想要转载的话，需注明作者是唐小筑和附原文链接。</p>

<p>在转移原有博文的过程中，也遇到些问题。虽然已放弃使用知乎和新浪博客作为镜像，但还是列出这些问题。</p>

<p>新浪博客：<br/>
1. 从微博和博客客户端无法查看博文表格，只有从新浪博客网页版查看表格才会正常显示；<br/>
2. 微博和博客客户端中查看博文，换行显示有问题，新浪博客网页版一切正常；<br/>
3. 微博和博客客户端中代码支持欠佳，而网页版较为正常；<br/>
4. 微博和博客客户端中空格似乎是全角的，网页版是正常的。<br/>
所以新浪太奇葩，自家的东西解析方式千奇百怪。</p>

<p>知乎：<br/>
1. 不支持粘贴图片；<br/>
2. 不支持表格；<br/>
3. 不支持分隔线。</p>

<p>标记语言 Markdown 既简单又较为全面，使我们可以脱离鼠标写一篇排版良好的博客。虽然在不同的应用中，可以设置快捷键来达到同样的目的，但如果绝大部分应用都支持 Markdown，我们也不用费力地为不同的应用设置快捷键。况且，网页端编辑器很多不支持快捷键。我试试定期给一些提供博客服务的企业发送反馈，建议直接采用 Markdown，或改进再采用，或确定一种新标记语言。当然，可视化界面不必非要和 Markdown 语言对应。</p>

]]></content>
  </entry>
  
</feed>
